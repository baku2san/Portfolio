@page "/contact"
@using Portfolio.Services
@using System.ComponentModel.DataAnnotations
@inject IPortfolioDataService PortfolioService

<PageTitle>連絡先 | @portfolioInfo.Name</PageTitle>

<div class="container py-5">
    <div class="row mb-5">
        <div class="col-12">
            <div class="text-center mb-5">
                <h1 class="display-4 fw-bold mb-3">お問い合わせ</h1>
                <p class="lead mb-4">
                    プロジェクトのご相談やお問い合わせはこちらからお願いいたします。
                    SNSでのフォローもお待ちしております。
                </p>
            </div>
        </div>
    </div>

    <div class="row g-4">
        <div class="col-lg-6 mb-4">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h2 class="card-title mb-4">フォームでのお問い合わせ</h2>
                    
                    <EditForm Model="@contactForm" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        
                        <div class="mb-3">
                            <label for="name" class="form-label">お名前</label>
                            <InputText id="name" class="form-control" @bind-Value="contactForm.Name" />
                            <ValidationMessage For="@(() => contactForm.Name)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="email" class="form-label">メールアドレス</label>
                            <InputText id="email" class="form-control" @bind-Value="contactForm.Email" />
                            <ValidationMessage For="@(() => contactForm.Email)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="subject" class="form-label">件名</label>
                            <InputText id="subject" class="form-control" @bind-Value="contactForm.Subject" />
                            <ValidationMessage For="@(() => contactForm.Subject)" />
                        </div>
                        
                        <div class="mb-3">
                            <label for="message" class="form-label">メッセージ</label>
                            <InputTextArea id="message" class="form-control" rows="5" @bind-Value="contactForm.Message" />
                            <ValidationMessage For="@(() => contactForm.Message)" />
                        </div>
                        
                        <button type="submit" class="btn btn-primary" disabled="@formSubmitted">
                            @if (formSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>送信中...</span>
                            }
                            else
                            {
                                <span>送信する</span>
                            }
                        </button>
                        
                        @if (formSubmitted)
                        {
                            <div class="alert alert-success mt-3" role="alert">
                                お問い合わせありがとうございます。2営業日以内にご返信いたします。
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
        
        <div class="col-lg-6 mb-4">
            <div class="card h-100 shadow-sm">
                <div class="card-body">
                    <h2 class="card-title mb-4">連絡先情報</h2>
                    
                    <ul class="list-unstyled contact-list">
                        <li class="mb-3">
                            <i class="bi bi-envelope-fill contact-icon"></i>
                            <a href="mailto:@contactInfo.Email">@contactInfo.Email</a>
                        </li>
                        
                        @if (!string.IsNullOrEmpty(contactInfo.GitHub))
                        {
                            <li class="mb-3">
                                <i class="bi bi-github contact-icon"></i>
                                <a href="@contactInfo.GitHub" target="_blank">GitHub</a>
                            </li>
                        }
                        
                        @if (!string.IsNullOrEmpty(contactInfo.LinkedIn))
                        {
                            <li class="mb-3">
                                <i class="bi bi-linkedin contact-icon"></i>
                                <a href="@contactInfo.LinkedIn" target="_blank">LinkedIn</a>
                            </li>
                        }
                        
                        @if (!string.IsNullOrEmpty(contactInfo.Twitter))
                        {
                            <li class="mb-3">
                                <i class="bi bi-twitter-x contact-icon"></i>
                                <a href="@contactInfo.Twitter" target="_blank">Twitter</a>
                            </li>
                        }
                        
                        @if (!string.IsNullOrEmpty(contactInfo.Website))
                        {
                            <li class="mb-3">
                                <i class="bi bi-globe contact-icon"></i>
                                <a href="@contactInfo.Website" target="_blank">Webサイト</a>
                            </li>
                        }
                    </ul>
                    
                    <div class="mt-4">
                        <h3>稼働状況</h3>
                        <p>現在、新しいプロジェクトの相談を受け付けています。特にBlazorやASP.NET Coreに関連するプロジェクトに興味があります。</p>
                    </div>
                    
                    <div class="social-links mt-4">
                        @if (!string.IsNullOrEmpty(contactInfo.GitHub))
                        {
                            <a href="@contactInfo.GitHub" target="_blank" class="social-icon">
                                <i class="bi bi-github"></i>
                            </a>
                        }
                        
                        @if (!string.IsNullOrEmpty(contactInfo.LinkedIn))
                        {
                            <a href="@contactInfo.LinkedIn" target="_blank" class="social-icon">
                                <i class="bi bi-linkedin"></i>
                            </a>
                        }
                        
                        @if (!string.IsNullOrEmpty(contactInfo.Twitter))
                        {
                            <a href="@contactInfo.Twitter" target="_blank" class="social-icon">
                                <i class="bi bi-twitter-x"></i>
                            </a>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .contact-list li {
        display: flex;
        align-items: center;
    }
    
    .contact-icon {
        margin-right: 10px;
        color: var(--bs-primary);
        font-size: 1.2rem;
    }
    
    .social-links {
        display: flex;
        gap: 15px;
    }
    
    .social-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--bs-light);
        color: var(--bs-dark);
        font-size: 1.2rem;
        transition: all 0.3s ease;
    }
    
    .social-icon:hover {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        transform: translateY(-3px);
    }
</style>

@code {
    private PortfolioInfo portfolioInfo = new();
    private ContactInfo contactInfo = new();
    
    private ContactForm contactForm = new();
    private bool formSubmitting = false;
    private bool formSubmitted = false;

    protected override void OnInitialized()
    {
        portfolioInfo = PortfolioService.GetPortfolioInfo();
        contactInfo = PortfolioService.GetContactInfo();
    }
    
    private async Task HandleValidSubmit()
    {
        formSubmitting = true;
        
        // 実際のプロジェクトでは、ここでメールを送信するなどの処理を行います
        await Task.Delay(1500); // 送信処理のシミュレーション
        
        formSubmitting = false;
        formSubmitted = true;
        contactForm = new(); // フォームをリセット
    }
    
    public class ContactForm
    {
        [Required(ErrorMessage = "お名前を入力してください")]
        [StringLength(100, ErrorMessage = "お名前は100文字以内で入力してください")]
        public string Name { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "メールアドレスを入力してください")]
        [EmailAddress(ErrorMessage = "有効なメールアドレスを入力してください")]
        public string Email { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "件名を入力してください")]
        [StringLength(200, ErrorMessage = "件名は200文字以内で入力してください")]
        public string Subject { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "メッセージを入力してください")]
        [StringLength(2000, ErrorMessage = "メッセージは2000文字以内で入力してください")]
        public string Message { get; set; } = string.Empty;
    }
}
